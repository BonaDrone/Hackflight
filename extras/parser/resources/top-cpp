/*
MSPPG.cpp: C++ routines for MSPPG parser

Auto-generated code: DO NOT EDIT!

Copyright (C) Simon D. Levy 2018

This program is part of Hackflight

This code is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 of the 
License, or (at your option) any later version.

This code is distributed in the hope that it will be useful,     
but WITHOUT ANY WARRANTY without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU Lesser General Public License 
along with this code.  If not, see <http:#www.gnu.org/licenses/>.
*/

#include "MSPPG.h"

#include <string.h>
#include <stdio.h>
#include <stdlib.h>

static uint8_t CRC8(uint8_t * data, int n) {

    uint8_t crc = 0x00;

    for (int k=0; k<n; ++k) {

        crc ^= data[k];
    }

    return crc;
}

uint8_t MSP_Message::start() {

    _pos = 0;
    return getNext();
}

bool MSP_Message::hasNext() {

    return _pos <= _len;
}


uint8_t MSP_Message::getNext() {

    return _bytes[_pos++];
}

MSP_Parser::MSP_Parser() {

    _state = 0;
}

void MSP_Parser::parse(uint8_t b) {

    switch (_state) {

        case 0:               // sync char 1
            if (b == 36) { // $
                _state++;
            }
            break;        

        case 1:               // sync char 2
            if (b == 77) { // M
                _state++;
            }
            else {            // restart and try again
                _state = 0;
            }
            break;

        case 2:               // direction (should be >)
            if (b == 62) { // >
                _message_direction = 1;
            }
            else {            // <
                _message_direction = 0;
            }
            _state++;
            break;

        case 3:
            _message_length_expected = b;
            _message_checksum = b;
            // setup arraybuffer
            _message_length_received = 0;
            _state++;
            break;

        case 4:
            _message_id = b;
            _message_checksum ^= b;
            if (_message_length_expected > 0) {
                // process payload
                _state++;
            }
            else {
                // no payload
                _state += 2;
            }
            break;

        case 5: // payload
            _message_buffer[_message_length_received] = b;
            _message_checksum ^= b;
            _message_length_received++;
            if (_message_length_received >= _message_length_expected) {
                _state++;
            }
            break;

        case 6:
            _state = 0;
            if (_message_checksum == b) {
                // message received, process
                switch (_message_id) {
                
