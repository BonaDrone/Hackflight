/*
msppg.c: C routines for MSPPG parser

Auto-generated code: DO NOT EDIT!

Copyright (C) Simon D. Levy 2018

This program is part of Hackflight

This code is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 of the 
License, or (at your option) any later version.

This code is distributed in the hope that it will be useful,     
but WITHOUT ANY WARRANTY without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU Lesser General Public License 
along with this code.  If not, see <http:#www.gnu.org/licenses/>.
*/

#include "msppg.h"

#include <string.h>
#include <stdio.h>
#include <stdlib.h>

static byte CRC8(byte * data, int n) {

    byte crc = 0x00;
    int k;

    for (k=0; k<n; ++k) {

        crc ^= data[k];
    }

    return crc;
}

byte msp_message_start(msp_message_t * msg) {

    msg->pos = 0;
    return msp_message_get_next(msg);
}

bool msp_message_has_next(msp_message_t * msg) {

    return msg->pos <= msg->len;
}

byte msp_message_get_next(msp_message_t * msg) {

    return msg->bytes[msg->pos++];
}

void msp_parser_init(msp_parser_t * parser) {

    parser->state = 0;
}

void msp_parser_parse(msp_parser_t * parser, byte b) {

    switch (parser->state) {

        case 0:               // sync char 1
            if (b == 36) { // $
                parser->state++;
            }
            break;        

        case 1:               // sync char 2
            if (b == 77) { // M
                parser->state++;
            }
            else {            // restart and try again
                parser->state = 0;
            }
            break;

        case 2:               // direction (should be >)
            if (b == 62) { // >
                parser->message_direction = 1;
            }
            else {            // <
                parser->message_direction = 0;
            }
            parser->state++;
            break;

        case 3:
            parser->message_length_expected = b;
            parser->message_checksum = b;
            // setup arraybuffer
            parser->message_length_received = 0;
            parser->state++;
            break;

        case 4:
            parser->message_id = b;
            parser->message_checksum ^= b;
            if (parser->message_length_expected > 0) {
                // process payload
                parser->state++;
            }
            else {
                // no payload
                parser->state += 2;
            }
            break;

        case 5: // payload
            parser->message_buffer[parser->message_length_received] = b;
            parser->message_checksum ^= b;
            parser->message_length_received++;
            if (parser->message_length_received >= parser->message_length_expected) {
                parser->state++;
            }
            break;

        case 6:
            parser->state = 0;
            if (parser->message_checksum == b) {
                // message received, process
                switch (parser->message_id) {
                
